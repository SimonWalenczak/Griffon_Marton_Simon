//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Inputs/InputActionScheme.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputActionScheme: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputActionScheme()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputActionScheme"",
    ""maps"": [
        {
            ""name"": ""CardController"",
            ""id"": ""554074db-e9d3-4e23-bb0d-42a652d3600d"",
            ""actions"": [
                {
                    ""name"": ""LeftClickPress"",
                    ""type"": ""Button"",
                    ""id"": ""b5c807da-9532-4c20-8b23-06a3ec401bf4"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MouseMove"",
                    ""type"": ""Value"",
                    ""id"": ""b7473a4b-aa91-408a-990f-5bcf84dbfb55"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""7617b6ed-27cb-4376-bde7-698f284e695d"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LeftClickPress"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3c061710-b6f6-46ec-ae0f-0105aebb87c7"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MouseMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // CardController
        m_CardController = asset.FindActionMap("CardController", throwIfNotFound: true);
        m_CardController_LeftClickPress = m_CardController.FindAction("LeftClickPress", throwIfNotFound: true);
        m_CardController_MouseMove = m_CardController.FindAction("MouseMove", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // CardController
    private readonly InputActionMap m_CardController;
    private List<ICardControllerActions> m_CardControllerActionsCallbackInterfaces = new List<ICardControllerActions>();
    private readonly InputAction m_CardController_LeftClickPress;
    private readonly InputAction m_CardController_MouseMove;
    public struct CardControllerActions
    {
        private @InputActionScheme m_Wrapper;
        public CardControllerActions(@InputActionScheme wrapper) { m_Wrapper = wrapper; }
        public InputAction @LeftClickPress => m_Wrapper.m_CardController_LeftClickPress;
        public InputAction @MouseMove => m_Wrapper.m_CardController_MouseMove;
        public InputActionMap Get() { return m_Wrapper.m_CardController; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(CardControllerActions set) { return set.Get(); }
        public void AddCallbacks(ICardControllerActions instance)
        {
            if (instance == null || m_Wrapper.m_CardControllerActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_CardControllerActionsCallbackInterfaces.Add(instance);
            @LeftClickPress.started += instance.OnLeftClickPress;
            @LeftClickPress.performed += instance.OnLeftClickPress;
            @LeftClickPress.canceled += instance.OnLeftClickPress;
            @MouseMove.started += instance.OnMouseMove;
            @MouseMove.performed += instance.OnMouseMove;
            @MouseMove.canceled += instance.OnMouseMove;
        }

        private void UnregisterCallbacks(ICardControllerActions instance)
        {
            @LeftClickPress.started -= instance.OnLeftClickPress;
            @LeftClickPress.performed -= instance.OnLeftClickPress;
            @LeftClickPress.canceled -= instance.OnLeftClickPress;
            @MouseMove.started -= instance.OnMouseMove;
            @MouseMove.performed -= instance.OnMouseMove;
            @MouseMove.canceled -= instance.OnMouseMove;
        }

        public void RemoveCallbacks(ICardControllerActions instance)
        {
            if (m_Wrapper.m_CardControllerActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ICardControllerActions instance)
        {
            foreach (var item in m_Wrapper.m_CardControllerActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_CardControllerActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public CardControllerActions @CardController => new CardControllerActions(this);
    public interface ICardControllerActions
    {
        void OnLeftClickPress(InputAction.CallbackContext context);
        void OnMouseMove(InputAction.CallbackContext context);
    }
}
